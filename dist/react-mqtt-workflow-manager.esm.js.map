{"version":3,"file":"react-mqtt-workflow-manager.esm.js","sources":["../src/ducks/workflowManager.slice.ts","../src/ducks/utils.ts","../src/utils/constants.ts","../src/utils/isValidTopic.util.ts","../src/utils/isValidJSON.util.ts","../src/utils/shouldSubscribeOrUnsubscribe.util.ts","../src/WorkflowManagerConfig.ts","../src/contexts/mqtt.context.ts","../src/WorkflowManager.tsx","../src/hooks/useMqtt.hook.ts","../src/hooks/useSubscribe.hook.ts","../src/hooks/useUnsubscribe.hook.ts","../src/index.tsx"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { WorkflowManagerState } from './types';\n\nconst Types = {\n  addProcess: 'internal/ADD_PROCESS',\n  removeProcess: 'internal/REMOVE_PROCESS',\n};\n\nconst initialState: WorkflowManagerState = {\n  activeProcesses: [],\n};\n\nexport const workflowManagerSlice = createSlice({\n  name: '@@workflowManager',\n  initialState,\n  reducers: {\n    [Types.addProcess]: (state, action: PayloadAction<string>) => {\n      state.activeProcesses.push(action.payload);\n    },\n    [Types.removeProcess]: (state, action: PayloadAction<string>) => {\n      state.activeProcesses = state.activeProcesses.filter(\n        (process) => process !== action.payload,\n      );\n    },\n  },\n});\n\nexport const prefix = workflowManagerSlice.name;\nexport const addProcess = workflowManagerSlice.actions[Types.addProcess];\nexport const removeProcess = workflowManagerSlice.actions[Types.removeProcess];\n\nexport default workflowManagerSlice.reducer;\n","import { createAction } from '@reduxjs/toolkit';\n\nimport { prefix } from './workflowManager.slice';\n\nexport const createWorkflowAction = (\n  workflowAction: string,\n  payload: Record<string, unknown>,\n) => {\n  const actionName = `${prefix}/external/${workflowAction}`;\n\n  return createAction<typeof payload>(actionName)(payload);\n};\n","export const VALID_TOPIC_PATTERN =\n  /^(([\\\\+#]{1}|[^\\\\+#]*)\\/)?(([\\\\+#]{1}|[^\\\\+#]*)\\/{1})*(([\\\\+#]{1}|[^\\\\+#]*))$/;\n\nexport const ERROR_MESSAGES = {\n  NO_WRAPPER:\n    'No context found. Did you forget to wrap your app with WorkflowManager component?',\n  NO_VALID_TOPICS:\n    'Invalid MQTT topic(s) pattern(s). Please check your topics in the subscribe method.',\n  ERROR_OCURRED: 'An error occurred in MQTT client.',\n  NOT_CONNECTED: 'MQTT client is not connected.',\n  FAILED_TO_CONNECT:\n    'Failed to connect to MQTT broker. Please, check your connection settings.',\n  NO_STORE: 'No store found. Did you forget to set the store?',\n  INVALID_JSON: 'The MQTT message is not a valid JSON.',\n};\n\nexport const PROCESS_TOPIC_PATTERN = '/process/+processId/am/create';\n","import { VALID_TOPIC_PATTERN } from './constants';\n\nexport const isValidTopic = (topic: string): boolean => {\n  return VALID_TOPIC_PATTERN.test(topic);\n};\n","export const isValidJSON = (json: string): boolean => {\n  try {\n    JSON.parse(json);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n","import { Store } from '@reduxjs/toolkit';\nimport { MqttClient } from 'precompiled-mqtt';\nimport invariant from 'tiny-warning';\n\nimport { ERROR_MESSAGES } from './constants';\nimport { isValidTopic } from './isValidTopic.util';\n\nconst hasStore = (store: Store | null) => {\n  const isValid = store !== null;\n\n  if (!isValid) invariant(false, ERROR_MESSAGES.NO_STORE);\n\n  return isValid;\n};\n\nconst isClientConnected = (client: MqttClient | null) => {\n  const isValid = client?.connected;\n\n  if (!isValid) invariant(false, ERROR_MESSAGES.NOT_CONNECTED);\n\n  return client?.connected;\n};\n\nconst hasAllValidTopics = (topics: string | string[]) => {\n  const isValid = Array.isArray(topics)\n    ? topics.every((topic) => isValidTopic(topic))\n    : isValidTopic(topics);\n\n  if (!isValid) invariant(false, ERROR_MESSAGES.NO_VALID_TOPICS);\n\n  return isValid;\n};\n\nexport const shouldSubscribeOrUnsubscribe = (\n  topics: string | string[],\n  store: Store | null,\n  client: MqttClient | null,\n) => {\n  return (\n    hasAllValidTopics(topics) && hasStore(store) && isClientConnected(client)\n  );\n};\n","import { Store } from '@reduxjs/toolkit';\nimport { matches, exec } from 'mqtt-pattern';\nimport { MqttClient, IClientSubscribeOptions } from 'precompiled-mqtt';\nimport invariant from 'tiny-warning';\n\nimport { createWorkflowAction } from './ducks/utils';\nimport { addProcess, removeProcess } from './ducks/workflowManager.slice';\nimport { WorkflowManagerConfigProps } from './types';\nimport {\n  ERROR_MESSAGES,\n  isValidJSON,\n  shouldSubscribeOrUnsubscribe,\n  PROCESS_TOPIC_PATTERN,\n} from './utils';\n\nclass WorkflowManagerConfig implements WorkflowManagerConfigProps {\n  private static _client: MqttClient | null = null;\n  private static _store: Store | null = null;\n  private static _instance = new WorkflowManagerConfig();\n\n  constructor() {\n    this._setInstance(this);\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  private _setInstance(instance: WorkflowManagerConfig): void {\n    if (!WorkflowManagerConfig._instance) {\n      WorkflowManagerConfig._instance = instance;\n    }\n  }\n\n  private _onMessageArrived(subscribeTopic: string | string[]) {\n    return (topic: string, message: Buffer) => {\n      const payloadString = message.toString();\n\n      if (!isValidJSON(payloadString)) {\n        invariant(false, ERROR_MESSAGES.INVALID_JSON);\n        return;\n      }\n\n      const topics = [subscribeTopic].flat();\n      const isMatched = topics.some((subTopic) => matches(subTopic, topic));\n\n      if (isMatched) {\n        const store = WorkflowManagerConfig._store;\n        const dispatch = store?.dispatch as Store['dispatch'];\n        const payload = JSON.parse(message.toString());\n        const action = payload?.props?.action || '';\n        const result = payload?.props?.result || {};\n\n        dispatch(createWorkflowAction(action, result));\n      }\n    };\n  }\n\n  public static getInstance(): Readonly<WorkflowManagerConfig> {\n    return Object.freeze(WorkflowManagerConfig._instance);\n  }\n\n  public static setMqttClient(client: MqttClient): void {\n    this._client = client;\n  }\n\n  public static getStore(): Store | null {\n    return this._store;\n  }\n\n  /**\n   * @description Set the redux store. This is used to dispatch actions in the workflow manager.\n   * @param {Store} store\n   * @returns {void}\n   */\n  public setStore(store: Store): void {\n    WorkflowManagerConfig._store = store;\n  }\n\n  /**\n   * @description The MQTT Client instance is intended for external react component. Be sure to use this after de WorkflowManager component has been mounted.\n   * @returns {MqttClient | null}\n   */\n  public getMqttClient(): MqttClient | null {\n    return WorkflowManagerConfig._client;\n  }\n\n  /**\n   * @description Subscribe to a topic or topics.\n   * @param {(string | string[])} topic\n   * @param {IClientSubscribeOptions} options\n   */\n  public subscribe(\n    topic: string | string[],\n    options: IClientSubscribeOptions = {} as IClientSubscribeOptions,\n  ): void {\n    const client = this.getMqttClient();\n    const store = WorkflowManagerConfig._store;\n\n    const shouldSubscribe = shouldSubscribeOrUnsubscribe(topic, store, client);\n\n    if (!shouldSubscribe) return;\n\n    const dispatch = store?.dispatch as Store['dispatch'];\n\n    const topics = [topic].flat();\n\n    topics.forEach((subTopic) => {\n      const topicParams = exec(PROCESS_TOPIC_PATTERN, subTopic);\n      const processId = topicParams?.processId || '';\n\n      if (processId) dispatch(addProcess(processId));\n    });\n\n    client?.subscribe(topic, options);\n    client?.on('message', this._onMessageArrived(topic));\n  }\n\n  public unsubscribe(topic: string | string[]): void {\n    const client = this.getMqttClient();\n    const store = WorkflowManagerConfig._store;\n\n    const unsubscribe = shouldSubscribeOrUnsubscribe(topic, store, client);\n\n    if (!unsubscribe) return;\n\n    const dispatch = store?.dispatch as Store['dispatch'];\n    const topics = [topic].flat();\n\n    client?.unsubscribe(topic);\n    topics.forEach((subTopic) => {\n      dispatch(removeProcess(subTopic));\n    });\n  }\n}\n\nexport default WorkflowManagerConfig;\n","import { createContext } from 'react';\n\nimport { IMqttContext } from './types';\n\nexport const MqttContext = createContext<IMqttContext | undefined>(undefined);\n\nexport const MqttProvider = MqttContext.Provider;\n","import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { connect, MqttClient } from 'precompiled-mqtt';\nimport invariant from 'tiny-warning';\n\nimport { MqttProvider, IMqttContext } from './contexts';\nimport { WorkflowManagerProps } from './types';\nimport { ERROR_MESSAGES } from './utils';\nimport WorkflowManagerConfig from './WorkflowManagerConfig';\n\nexport const WorkflowManager: FC<WorkflowManagerProps> = ({\n  brokerUrl = '',\n  options,\n  children,\n}) => {\n  const [client, setClient] = useState<MqttClient | null>(null);\n  const [status, setStatus] = useState<IMqttContext['status']>('offline');\n  const [error, setError] = useState<IMqttContext['error']>(null);\n\n  const init = useCallback(() => {\n    if (!client) {\n      try {\n        const mqttInstance = connect(brokerUrl, options);\n\n        mqttInstance.on('connect', () => {\n          setStatus('connected');\n        });\n\n        mqttInstance.on('end', () => {\n          setStatus('offline');\n        });\n\n        mqttInstance.on('offline', () => {\n          setStatus('offline');\n        });\n\n        mqttInstance.on('error', () => {\n          setStatus('error');\n          invariant(false, ERROR_MESSAGES.ERROR_OCURRED);\n        });\n\n        mqttInstance.on('reconnect', () => {\n          setStatus('reconnecting');\n        });\n\n        setClient(mqttInstance);\n        WorkflowManagerConfig.setMqttClient(mqttInstance);\n      } catch (error) {\n        setStatus('error');\n        setError(error as Error);\n        invariant(false, ERROR_MESSAGES.FAILED_TO_CONNECT);\n      }\n    }\n  }, [brokerUrl, options, client]);\n\n  useEffect(() => {\n    init();\n  }, [init]);\n\n  const providerValue = useMemo(() => {\n    return { client, status, error };\n  }, [client, status, error]);\n\n  return <MqttProvider value={providerValue}>{children}</MqttProvider>;\n};\n","import { useContext } from 'react';\n\nimport invariant from 'tiny-warning';\n\nimport { MqttContext, IMqttContext } from '../contexts';\nimport { ERROR_MESSAGES } from '../utils';\n\nexport const useMqtt = (): IMqttContext => {\n  const context = useContext(MqttContext);\n\n  invariant(context, ERROR_MESSAGES.NO_WRAPPER);\n\n  return context as IMqttContext;\n};\n","import { useMemo } from 'react';\n\nimport { WorkflowManagerConfig } from '..';\n\n/**\n * @description Subscribe to a topic or topics.\n */\nexport const useSubscribe = () => {\n  return useMemo(() => WorkflowManagerConfig.subscribe, []);\n};\n","import { useMemo } from 'react';\n\nimport { WorkflowManagerConfig } from '..';\n\n/**\n * @description Subscribe to a topic or topics.\n */\nexport const useUnsubscribe = () => {\n  return useMemo(() => WorkflowManagerConfig.unsubscribe, []);\n};\n","import Config from './WorkflowManagerConfig';\n\nexport * from './WorkflowManager';\nexport * from './hooks';\nexport * from './types';\nexport * from './ducks';\n\nexport const WorkflowManagerConfig = Config.getInstance();\n"],"names":["Types","addProcess","removeProcess","initialState","activeProcesses","workflowManagerSlice","createSlice","name","reducers","_reducers","state","action","push","payload","filter","process","prefix","actions","reducer","createWorkflowAction","workflowAction","actionName","createAction","VALID_TOPIC_PATTERN","ERROR_MESSAGES","NO_WRAPPER","NO_VALID_TOPICS","ERROR_OCURRED","NOT_CONNECTED","FAILED_TO_CONNECT","NO_STORE","INVALID_JSON","PROCESS_TOPIC_PATTERN","isValidTopic","topic","test","isValidJSON","json","JSON","parse","e","hasStore","store","isValid","env","NODE_ENV","invariant","isClientConnected","client","connected","hasAllValidTopics","topics","Array","isArray","every","shouldSubscribeOrUnsubscribe","WorkflowManagerConfig","_setInstance","subscribe","bind","_proto","prototype","instance","_instance","_onMessageArrived","subscribeTopic","message","payloadString","toString","flat","isMatched","some","subTopic","matches","_payload$props","_payload$props2","_store","dispatch","props","result","getInstance","Object","freeze","setMqttClient","_client","getStore","setStore","getMqttClient","options","shouldSubscribe","forEach","topicParams","exec","processId","on","unsubscribe","MqttContext","createContext","undefined","MqttProvider","Provider","WorkflowManager","_ref","brokerUrl","_ref$brokerUrl","children","_useState","useState","setClient","_useState2","status","setStatus","_useState3","error","setError","init","useCallback","mqttInstance","connect","useEffect","providerValue","useMemo","React","value","useMqtt","context","useContext","useSubscribe","useUnsubscribe","Config"],"mappings":"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"}